/* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%                    P2 - P1 Taylor-Hood                  %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */

load "Element_P3"
load "Element_P1dc1"

// Problem variables
real rho        = 1.0;          // Density
real mu         = 0.035;        // Viscosity
real pd         = 8 * 13332.2;  // Diastolic pressure
real [int] Rd   = [100, 800];   // Resistance values
int nh          = 3;            // Number of elements in the mesh
real L          = 0.8;          // Periodicity length of the function g

// Domain definition
// Labels: 1 (walls), 2 (outlet 1), 3 (outlet 2), 4 (inlet)
border ba(t = 0, 1){x = t; y = 0; label = 1;}
border bb(t = 0, 1){x = 1 + t; y = -t; label = 1;}
border bc(t = 0, 0.3){x = 2 + t; y = -1 + t; label = 2;}
border bd(t = 0, 0.9){x = 2.3 - t; y = -0.7 + t; label = 1;}
border be(t = 0, 0.8){x = 1.4 + t; y = 0.2 + t; label = 1;}
border bf(t = 0, 0.2){x = 2.2 - t; y = 1 + t; label = 3;}
border bg(t = 0, 0.8){x = 2 - t; y = 1.2 - t; label = 1;}
border bh(t = 0, 1.2){x = 1.2 - t; y = 0.4; label = 1;}
border bi(t = 0, 0.4){x = 0; y = 0.4 - t; label = 4;}

mesh Th = buildmesh(ba(10*nh) + bb(10*nh) + bc(5*nh)
        + bd(10*nh) + be(10*nh) + bf(5*nh) + bg(10*nh) + bh(10*nh) + bi(5*nh) );

// plot(Th, wait = true);

// Definition of the finite element spaces for pressure and velocity
fespace Xh(Th, [P3, P3]);
fespace Mh(Th, P1dc);

// Definition of the variables and test functions (v, q)
Xh [ux, uy], [vx, vy];
Xh [uxOld, uyOld];
Mh p, q;

macro grad(u) [dx(u), dy(u)] // 
macro Grad(u1,u2) [grad(u1), grad(u2)] // 
macro eps(u1, u2) 0.5 * (Grad(u1, u2) + Grad(u1, u2)') //
macro div(u1, u2) (dx(u1) + dy(u2)) //

real dt = 0.01; 
int T   = 8;    

// Initial conditions (t = 0)
[ux, uy] = [0, 0];
p = pd;

// Time loop
for(real t = 0; t < T; t += dt){

    [uxOld, uyOld] = [ux, uy];

    // Outlet boundary condition
    real pOut1 = pd + Rd[0] * int1d(Th, 2)(uxOld* N.x + uyOld * N.y);
    real pOut2 = pd + Rd[1] * int1d(Th, 3)(uxOld* N.x + uyOld * N.y);

    // Definition of the funciton at the inlet
    real tt = t - floor(t / L) * L;
    real gTilde = (tt < 0.4) ? 1000*sin(pi*(tt)/0.4) : 0;
    func uin =  gTilde * (0.4 - y) * y;

    func real modNeg(real x) {
        return (x < 0) ? x : 0;
    }

    problem NS(<[ux,uy], [p]>, <[vx,vy], [q]>) = 
        // Time derivative
        int2d(Th)(rho/dt * (ux * vx + uy * vy))
        - int2d(Th)(rho/dt * (uxOld * vx + uyOld * vy))
        // Convective term
        + int2d(Th)(rho * (uxOld * dx(ux) + uyOld * dy(ux)) * vx)
        + int2d(Th)(rho * (uxOld * dx(uy) + uyOld * dy(uy)) * vy)
        // Diffusion term
        + int2d(Th)(mu * (dx(ux) * dx(vx) + dy(uy) * dy(vy)))
        + int2d(Th)(mu * (0.5 * (dx(uy) + dy(ux)) * 0.5 * (dx(vy) + dy(vx))))
        // Pressure term
        - int2d(Th)(p * div(vx, vy))
        - int2d(Th)(q * div(ux, uy))
        // Boundary terms
        - int1d(Th, 2)((rho/2) * modNeg(uxOld * N.x + uyOld * N.y) * (ux * vx + uy * vy))
        + int1d(Th, 2)(pOut1 * (vx * N.x + vy * N.y))
        - int1d(Th, 3)((rho/2) * modNeg(uxOld * N.x + uyOld * N.y) * (ux * vx + uy * vy))
        + int1d(Th, 3)(pOut2 * (vx * N.x + vy * N.y))
        // Boudnary conditions
        + on(1, ux = 0, uy = 0)
        + on(4, ux = uin, uy = 0);

    NS;

    if (t != 0)
        plot(ux, fill = true, value = true, wait = false);
}
